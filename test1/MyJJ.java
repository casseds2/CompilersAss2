/* Generated By:JJTree&JavaCC: Do not edit this line. MyJJ.java */
import java.io.*;
import java.util.*;

public class MyJJ/*@bgen(jjtree)*/implements MyJJTreeConstants, MyJJConstants {/*@bgen(jjtree)*/
  protected static JJTMyJJState jjtree = new JJTMyJJState();public static Hashtable ST = new Hashtable();

  public static void main(String[] args) throws ParseException, FileNotFoundException
  {
    String temp;
    STC temp2;

    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

    MyJJ parser = new MyJJ(new FileInputStream(args[0]));

    SimpleNode root = parser.program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");

    System.out.println();
    System.out.println("Symbol Table:");

    Enumeration t = ST.keys();

    while (t.hasMoreElements())
    {
      temp = (String)t.nextElement();
      temp2 = (STC)ST.get(temp);
      System.out.println(temp);
      if (temp2.type != null)
      {
        System.out.println(" type = " + temp2.type);
      }
      if (temp2.value != null)
      {
        System.out.println(" value = " + temp2.value);
      }
    }
    /*
    System.out.println();
    System.out.println("Program:");
    PrintVisitor pv = new PrintVisitor();
    root.jjtAccept(pv, null);

    System.out.println();
    System.out.println("Type Checking:");
    TypeCheckVisitor tc = new TypeCheckVisitor();
    root.jjtAccept(tc, ST);
    */
  }

/**PRODUCTION RULES**/
  static final public SimpleNode program() throws ParseException {
                                 /*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      decl_list();
      function_list();
      main();
      jj_consume_token(0);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void decl_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VARIABLE:
    case CONSTANT:
      decl();
      jj_consume_token(SEMIC);
      decl_list();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void decl() throws ParseException {
                     /*@bgen(jjtree) Decl */
  ASTDecl jjtn000 = new ASTDecl(JJTDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        var_decl();
        break;
      case CONSTANT:
        const_decl();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void var_decl() throws ParseException {
                             /*@bgen(jjtree) Var_decl */
                             ASTVar_decl jjtn000 = new ASTVar_decl(JJTVAR_DECL);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t; String name;
    try {
      t = jj_consume_token(VARIABLE);
      name = id();
                                    jjtn000.value = t.image;
      jj_consume_token(COLON);
      type();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void const_decl() throws ParseException {
                                 /*@bgen(jjtree) Const_decl */
                                 ASTConst_decl jjtn000 = new ASTConst_decl(JJTCONST_DECL);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);Token t; String name;
    try {
      t = jj_consume_token(CONSTANT);
      name = id();
                                    jjtn000.value = t.image;
      jj_consume_token(COLON);
      type();
      jj_consume_token(ASSIGN);
                                                                                        ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
                                                                                        boolean jjtc001 = true;
                                                                                        jjtree.openNodeScope(jjtn001);
      try {
        expression();
      } catch (Throwable jjte001) {
                                                                                        if (jjtc001) {
                                                                                          jjtree.clearNodeScope(jjtn001);
                                                                                          jjtc001 = false;
                                                                                        } else {
                                                                                          jjtree.popNode();
                                                                                        }
                                                                                        if (jjte001 instanceof RuntimeException) {
                                                                                          {if (true) throw (RuntimeException)jjte001;}
                                                                                        }
                                                                                        if (jjte001 instanceof ParseException) {
                                                                                          {if (true) throw (ParseException)jjte001;}
                                                                                        }
                                                                                        {if (true) throw (Error)jjte001;}
      } finally {
                                                                                        if (jjtc001) {
                                                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                                                        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void function_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case BOOLEAN:
    case VOID:
      function();
      function_list();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void function() throws ParseException {
                             /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      id();
      jj_consume_token(LBR);
      parameter_list();
      jj_consume_token(RBR);
      jj_consume_token(LCHAIN);
      decl_list();
      statement_block();
      jj_consume_token(RETURN);
      jj_consume_token(LBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case TRUE:
      case FALSE:
      case NUM:
      case ID:
        expression();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RBR);
      jj_consume_token(SEMIC);
      jj_consume_token(RCHAIN);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void type() throws ParseException {
                Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                         jjtn000.value = t.image;
      break;
    case BOOLEAN:
      t = jj_consume_token(BOOLEAN);
                         jjtn000.value = t.image;
      break;
    case VOID:
      t = jj_consume_token(VOID);
                      jjtn000.value = t.image;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parameter_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nemp_parameter_list();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void nemp_parameter_list() throws ParseException {
    id();
    jj_consume_token(COLON);
    type();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_parameter_list();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void main() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIN:
      jj_consume_token(MAIN);
      jj_consume_token(LCHAIN);
      decl_list();
      statement_block();
      jj_consume_token(RCHAIN);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCHAIN:
    case IF:
    case WHILE:
    case SKIPSKIP:
    case ID:
           ASTSTM jjtn001 = new ASTSTM(JJTSTM);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
      try {
        statement();
      } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
      } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  1);
           }
      }
      statement_block();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        expression();
        jj_consume_token(SEMIC);
        break;
      case LBR:
        jj_consume_token(LBR);
        arg_list();
        jj_consume_token(RBR);
        jj_consume_token(SEMIC);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case LCHAIN:
      jj_consume_token(LCHAIN);
      statement_block();
      jj_consume_token(RCHAIN);
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(LCHAIN);
      statement_block();
      jj_consume_token(RCHAIN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jj_consume_token(LCHAIN);
        statement_block();
        jj_consume_token(RCHAIN);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(LCHAIN);
      statement_block();
      jj_consume_token(RCHAIN);
      break;
    case SKIPSKIP:
      jj_consume_token(SKIPSKIP);
      jj_consume_token(SEMIC);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/***************************************************************************************************************/
/*******************************************EXPRESSION RULE*****************************************************/
/***************************************************************************************************************/

/*********************ORIGINAL***********************/
/*
void expression() : {}{
		fragment() binary_arith_op() fragment()
	|	<LBR> expression() <RBR>
	|	<ID> <LBR> arg_list() <RBR>
	|	fragment()
}
*/
  static final public void expression() throws ParseException {
    fragment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      binary_arith_op();
      expression();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void binary_arith_op() throws ParseException {
                         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
                      jjtn000.value = t.image;
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                       jjtn000.value = t.image;
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/*********************ORIGINAL***********************/
/*
void fragment() : {}{
		<ID>
	|	<MINUS> <ID>
	|	<NUM>
	|	<TRUE>
	|	<FALSE>
	|	expression()
}
*/
  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      id();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBR:
        jj_consume_token(LBR);
        arg_list();
        jj_consume_token(RBR);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      break;
    case NUM:
      number();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      fragment();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/***************************************************************************************************************/
/*******************************************CONDITION RULE******************************************************/
/***************************************************************************************************************/

/*********************ORIGINAL***********************/
/*
void condition() : {}{
		<NOTOP> condition()
	|	<LBR> condition() <RBR>
	|	expression() comp_op() expression()
	|	condition() <LBR> <OROP> | <ANDOP> <RBR> condition()
}
*/

/********************EDITED***************************/
  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOTOP:
      jj_consume_token(NOTOP);
      condition();
      break;
    case LBR:
      jj_consume_token(LBR);
      condition();
      jj_consume_token(RBR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OROP:
      case ANDOP:
        conditionPrime();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    case MINUS:
    case TRUE:
    case FALSE:
    case NUM:
    case ID:
      expression();
      comp_op();
      expression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OROP:
      case ANDOP:
        conditionPrime();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void conditionPrime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANDOP:
      jj_consume_token(ANDOP);
      break;
    case OROP:
      jj_consume_token(OROP);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    condition();
  }

  static final public void comp_op() throws ParseException {
                  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEQLS:
      jj_consume_token(BOOLEQLS);
      break;
    case NOTEQLS:
      jj_consume_token(NOTEQLS);
      break;
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
      break;
    case LESSEQL:
      jj_consume_token(LESSEQL);
      break;
    case GREATERTHAN:
      jj_consume_token(GREATERTHAN);
      break;
    case GREATEQL:
      jj_consume_token(GREATEQL);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      nemp_arg_list();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
  }

  static final public void id() throws ParseException {
             Token t;
    t = jj_consume_token(ID);
            jjtn000.value = t.image;
  }

  static final public void number() throws ParseException {
                 Token t;
    t = jj_consume_token(NUM);
                   jjtn000.value = t.image;
  }

  static final public void true1() throws ParseException {
                Token t;
    t = jj_consume_token(TRUE);
                    jjtn000.value = t.image;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyJJTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x0,0x100000,0x0,0x0,0x800,0x0,0x8000,0x24000,0x0,0x8000,0x180000,0x180000,0x20000,0x100000,0x1800000,0x1800000,0x520000,0x1800000,0x7e000000,0x0,0x800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x1c,0x5300,0x1c,0x4000,0x0,0x20,0x4c40,0x0,0x80,0x4c40,0x0,0x0,0x0,0x5300,0x0,0x0,0x5300,0x0,0x0,0x4000,0x0,};
   }

  /** Constructor with InputStream. */
  public MyJJ(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyJJ(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyJJTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyJJ(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyJJTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyJJ(MyJJTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyJJTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[49];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 49; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
