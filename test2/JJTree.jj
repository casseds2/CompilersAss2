/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. JJTree.jj */
/*@egen*//**Set Options**/

options
{
  IGNORE_CASE = false;
             
                 
                          
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(JJTree)

import java.io.*;
import java.util.*;

public class JJTree/*@bgen(jjtree)*/implements JJTreeTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTJJTreeState jjtree = new JJTJJTreeState();

/*@egen*/
  public static Hashtable ST = new Hashtable();

  public static void main(String[] args) throws ParseException, FileNotFoundException
  {
    String temp;
    STC temp2;

    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

    JJTree parser = new JJTree(new FileInputStream(args[0]));

    SimpleNode root = parser.program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");

    System.out.println();
    System.out.println("Symbol Table:");

    Enumeration t = ST.keys();

    while (t.hasMoreElements())
    {
      temp = (String)t.nextElement();
      temp2 = (STC)ST.get(temp);
      System.out.println(temp);
      if (temp2.type != null)
      {
        System.out.println(" type = " + temp2.type);
      }
      if (temp2.value != null)
      {
        System.out.println(" value = " + temp2.value);
      }
    }
/*
    System.out.println();
    System.out.println("Program:");
    PrintVisitor pv = new PrintVisitor();
    root.jjtAccept(pv, null);

    System.out.println();
    System.out.println("Type Checking:");
    TypeCheckVisitor tc = new TypeCheckVisitor();
    root.jjtAccept(tc, ST);
*/  
  }
}

PARSER_END(JJTree)


/**Specify the Tokens For Lexical Analysis**/
TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
" "
| "\t"
| "\n"
| "\r"
| "\f"
| < "//" (~["\n"])* "\n" >
}
SKIP : /* COMMENTS */
{
"/*" { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
		"/*" { commentNesting++; }
	| 	"*/" { commentNesting--;
	if (commentNesting == 0)
	SwitchTo(DEFAULT);
	}
	| <~[]>
}

TOKEN :{
		<COMMA : ",">
	|	<SEMIC : ";">
	|	<COLON : ":">
	|	<ASSIGN : "=">
	|	<LCHAIN : "{">
	|	<RCHAIN : "}">
	|	<LBR : "(">
	|	<RBR : ")">
	|	<PLUS : "+">
	|	<MINUS : "-">
	|	<UNDERSCORE : "_">
	|	<NOTOP : "~">
	|	<OROP : "||">
	|	<ANDOP : "&&">
	|	<BOOLEQLS : "==">
	|	<NOTEQLS : "!=">
	|	<LESSTHAN : "<">
	|	<GREATERTHAN : ">">
	|	<LESSEQL : "<=">
	|	<GREATEQL : ">=">
	|	<VARIABLE : "var">
	|	<CONSTANT : "const">
	|	<RETURN : "return">
	|	<INTEGER : "integer">
	|	<BOOLEAN : "boolean">
	|	<VOID : "void">
	|	<MAIN : "main">
	|	<IF : "if">
	|	<ELSE : "else">
	|	<TRUE : "true">
	|	<FALSE : "false">
	|	<WHILE : "while">
	|	<SKIPSKIP : "skip">
}

TOKEN :{
	  <NUM : (<DIGIT>) + >
	| < #DIGIT : ("-")? ["0" - "9"]>
	| <ID : <LETTER>(<LETTER> | <UNDERSCORE> | <DIGIT>)*>
	| < #LETTER : ["a" - "z", "A" - "Z"]>
}

TOKEN :{
	<OTHER : ~[]>
}

/**PRODUCTION RULES**/
SimpleNode program()          : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	decl_list()
	function_list()
	main()
	{return jjtn000;}
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void decl_list()       : {}{
	(decl() <SEMIC> decl_list())?
}

void decl()       : {}{
	var_decl() | const_decl()
}

void var_decl()       : {/*@bgen(jjtree) Decl */
                         ASTDecl jjtn000 = new ASTDecl(JJTDECL);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Decl */
        try {
/*@egen*/
	t = <VARIABLE> identifier() <COLON> type()/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void const_decl()       : {/*@bgen(jjtree) Decl */
                           ASTDecl jjtn000 = new ASTDecl(JJTDECL);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Decl */
        try {
/*@egen*/
	t = <CONSTANT> identifier() <COLON> type()/*@bgen(jjtree) #Assign( 2) */
                                                   {
                                                     ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                   }
                                                   try {
/*@egen*/ <ASSIGN>/*@bgen(jjtree)*/
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001,  2);
                                                     }
                                                   }
/*@egen*/            expression()/*@bgen(jjtree)*/
                                                                                    {
                                                                                      jjtree.closeNodeScope(jjtn000, true);
                                                                                      jjtc000 = false;
                                                                                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void function_list()       : {}{
	(function() function_list())?
}

void function()           : {/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Function */
        try {
/*@egen*/
	type() identifier() <LBR> parameter_list() <RBR>
	<LCHAIN>
		decl_list()
		statement_block()
		<RETURN> <LBR> (expression())? <RBR>/*@bgen(jjtree) #Function_Return( 1) */
                                                     {
                                                       ASTFunction_Return jjtn001 = new ASTFunction_Return(JJTFUNCTION_RETURN);
                                                       boolean jjtc001 = true;
                                                       jjtree.openNodeScope(jjtn001);
                                                     }
                                                     try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                                     } finally {
                                                       if (jjtc001) {
                                                         jjtree.closeNodeScope(jjtn001,  1);
                                                       }
                                                     }
/*@egen*/                    
	<RCHAIN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void type ()       : {/*@bgen(jjtree) Type */
                      ASTType jjtn000 = new ASTType(JJTTYPE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String name;}{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	t = <INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <BOOLEAN>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.value = t.image;} 
	| t = <VOID>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void parameter_list()         : {/*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Params */
        try {
/*@egen*/
	(nemp_parameter_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nemp_parameter_list()       : {}{
	identifier() <COLON> (type() [<COMMA> nemp_parameter_list()])
}

void main()       : {/*@bgen(jjtree) Main */
  ASTMain jjtn000 = new ASTMain(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Main */
        try {
/*@egen*/
	[
	<MAIN>
	<LCHAIN>
		decl_list()
		statement_block()
	<RCHAIN>
	]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void statement_block()       : {}{
	(statement() statement_block())?
}

void statement()       /*#Assign*/ : {}{
		identifier()
		(
				<ASSIGN> expression()/*@bgen(jjtree) #Assign( 2) */
                                                      {
                                                        ASTAssign jjtn001 = new ASTAssign(JJTASSIGN);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*/ <SEMIC>/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
                                                      }
/*@egen*/           
			|	<LBR> arg_list() <RBR> <SEMIC>
		)?
	|	<LCHAIN> statement_block() <RCHAIN>
	|	conditionStatement() condition() <LCHAIN> statement_block() <RCHAIN> [LOOKAHEAD(2) conditionStatement() <LCHAIN> statement_block() <RCHAIN>]
//	|	whileC() condition() <LCHAIN> statement_block() <RCHAIN>
	|	<SKIPSKIP> <SEMIC>
//	|	<LBR> arg_list() <RBR> <SEMIC>
}

void expression()       : {}{
		fragment() [binary_arith_op() ]	
}

void binary_arith_op()            : {/*@bgen(jjtree) #Bin_op( 2) */
                                     ASTBin_op jjtn000 = new ASTBin_op(JJTBIN_OP);
                                     boolean jjtc000 = true;
                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) #Bin_op( 2) */
                try {
/*@egen*/
		t = <PLUS> expression()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000,  2);
                                          jjtc000 = false;
                                        }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <MINUS> expression()/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000,  2);
                                           jjtc000 = false;
                                         }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000,  2);
                  }
                }
/*@egen*/
}

void fragment()              : {/*@bgen(jjtree) #Fragment( 1) */
                                ASTFragment jjtn000 = new ASTFragment(JJTFRAGMENT);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) #Fragment( 1) */
                try {
/*@egen*/
		identifier()
		(
			[<LBR> arg_list() <RBR>]
		)
	|	num()
	|	bool()
	|	minus() fragment()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000,  1);
                  }
                }
/*@egen*/
}

void condition()       : {}{
		<NOTOP> condition() 
	|	<LBR> condition() <RBR> [conditionPrime()]
	|	expression() comp_op() expression() [conditionPrime()]
}

void conditionPrime()            : {/*@bgen(jjtree) #And_Or( 4) */
                                    ASTAnd_Or jjtn000 = new ASTAnd_Or(JJTAND_OR);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) #And_Or( 4) */
        try {
/*@egen*/
	(	
		t = <ANDOP> {jjtn000.value = t.image;} 
	| 	t = <OROP> {jjtn000.value = t.image;}
	) condition()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  4);
          }
        }
/*@egen*/
}

void comp_op()             : {/*@bgen(jjtree) #Comp_op( 1) */
                              ASTComp_op jjtn000 = new ASTComp_op(JJTCOMP_OP);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) #Comp_op( 1) */
                try {
/*@egen*/
		t = <BOOLEQLS>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000,  1);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <NOTEQLS>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000,  1);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <LESSTHAN>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000,  1);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <LESSEQL>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000,  1);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <GREATERTHAN>/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000,  1);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.value = t.image;}
	|	t = <GREATEQL>/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000,  1);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000,  1);
                  }
                }
/*@egen*/
}

void arg_list()       : {/*@bgen(jjtree) Args */
  ASTArgs jjtn000 = new ASTArgs(JJTARGS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Args */
        try {
/*@egen*/
	(nemp_arg_list())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nemp_arg_list()       : {}{
	identifier() [(<COMMA> nemp_arg_list())]
}

String identifier()     : {/*@bgen(jjtree) ID */
                           ASTID jjtn000 = new ASTID(JJTID);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t = <ID>/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.value = t.image; return t.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void num()      : {/*@bgen(jjtree) Num */
                   ASTNum jjtn000 = new ASTNum(JJTNUM);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Num */
        try {
/*@egen*/
	t = <NUM>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void bool()       : {/*@bgen(jjtree) Bool */
                     ASTBool jjtn000 = new ASTBool(JJTBOOL);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Bool */
        try {
/*@egen*/
	t = <TRUE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <FALSE>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void minus()        : {/*@bgen(jjtree) Minus */
                       ASTMinus jjtn000 = new ASTMinus(JJTMINUS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) Minus */
        try {
/*@egen*/
	t = <MINUS>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void conditionStatement()                         : {/*@bgen(jjtree) #Condition_Statement( 1) */
                                                     ASTCondition_Statement jjtn000 = new ASTCondition_Statement(JJTCONDITION_STATEMENT);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}{/*@bgen(jjtree) #Condition_Statement( 1) */
        try {
/*@egen*/
	t = <WHILE>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000,  1);
                      jjtc000 = false;
                    }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <IF>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000,  1);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.value = t.image;}
	| t = <ELSE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000,  1);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000,  1);
          }
        }
/*@egen*/
}
