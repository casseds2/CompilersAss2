options
{
  IGNORE_CASE = false;
  MULTI=true;
  VISITOR = true;
}

PARSER_BEGIN(MyJJ)

import java.io.*;
import java.util.*;

public class MyJJ
{
  //public static Hashtable ST = new Hashtable();

  public static void main(String[] args) throws ParseException, FileNotFoundException
  {
    String temp;
    //STC temp2;

    if (args.length < 1)
    {
      System.out.println("Please pass in the filename.");
      System.exit(1);
    }

    MyJJ parser = new MyJJ(new FileInputStream(args[0]));

    SimpleNode root = parser.program();

    System.out.println("Abstract Syntax Tree:");

    root.dump(" ");

    System.out.println();
    //System.out.println("Symbol Table:");

    //Enumeration t = ST.keys();
    /*
    while (t.hasMoreElements())
    {
      temp = (String)t.nextElement();
      temp2 = (STC)ST.get(temp);
      System.out.println(temp);
      if (temp2.type != null)
      {
        System.out.println(" type = " + temp2.type);
      }
      if (temp2.value != null)
      {
        System.out.println(" value = " + temp2.value);
      }
    }

    System.out.println();
    System.out.println("Program:");
    PrintVisitor pv = new PrintVisitor();
    root.jjtAccept(pv, null);

    System.out.println();
    System.out.println("Type Checking:");
    TypeCheckVisitor tc = new TypeCheckVisitor();
    root.jjtAccept(tc, ST);    
    */
  }
}

PARSER_END(MyJJ)

//********************************************START OF TOKENS*******************************************************//
/**Specify the Tokens For Lexical Analysis**/
TOKEN_MGR_DECLS :
{
static int commentNesting = 0;
}
SKIP : /*** Ignoring spaces/tabs/newlines ***/
{
" "
| "\t"
| "\n"
| "\r"
| "\f"
| < "//" (~["\n"])* "\n" >
}
SKIP : /* COMMENTS */
{
"/*" { commentNesting++; } : IN_COMMENT
}
<IN_COMMENT> SKIP :
{
    "/*" { commentNesting++; }
  |   "*/" { commentNesting--;
  if (commentNesting == 0)
  SwitchTo(DEFAULT);
  }
  | <~[]>
}

TOKEN :{
    <COMMA      : ",">
  | <SEMIC      : ";">
  | <COLON      : ":">
  | <ASSIGN     : "=">
  | <LCHAIN     : "{">
  | <RCHAIN     : "}">
  | <LBR        : "(">
  | <RBR        : ")">
  | <PLUS       : "+">
  | <MINUS      : "-">
  | <UNDERSCORE : "_">
  | <NOTOP      : "~">
  | <OROP       : "||">
  | <ANDOP      : "&&">
  | <BOOLEQLS   : "==">
  | <NOTEQLS    : "!=">
  | <LESSTHAN   : "<">
  | <GREATERTHAN : ">">
  | <LESSEQL    :  "<=">
  | <GREATEQL   : ">=">
  | <VARIABLE   : "var">
  | <CONSTANT   : "const">
  | <RETURN     : "return">
  | <INTEGER    : "integer">
  | <BOOLEAN    : "boolean">
  | <VOID       : "void">
  | <MAIN       : "main">
  | <IF         : "if">
  | <ELSE       : "else">
  | <TRUE       : "true">
  | <FALSE      : "false">
  | <WHILE      : "while">
  | <SKIPSKIP   : "skip">
}

TOKEN :{
    <NUM : (<DIGIT>) + >
  | < #DIGIT : ("-")? ["0" - "9"]>
  | <ID : <LETTER>(<LETTER> | <UNDERSCORE> | <DIGIT>)*>
  | < #LETTER : ["a" - "z", "A" - "Z"]>
}

TOKEN :{
  <OTHER : ~[]>
}
//*******************************************END OF TOKENS********************************************//


//If no #VOID, Rule Name is the name of the created node

/**PRODUCTION RULES**/
SimpleNode program() #PROGRAM : {}{
  decl_list()
  function_list()
  main()
  <EOF>
  {return jjtThis;}
}

void decl_list() #void : {}{
  (decl() <SEMIC> decl_list())?  /**SHOULD I ADD #decl_list(2) after this as its optional?**/
}

void decl() #void : {}{
  var_decl() | const_decl()
}

void var_decl() #VAR: {}{
  <VARIABLE> id() <COLON> type()
}

void const_decl() #CONST : {}{
  <CONSTANT> id() <COLON> type() <ASSIGN> expression()
}

void function_list() #void : {}{ //Dont want to create a node as its done in function()
  (function() function_list())?
}

void function() #FUNCTION : {}{
  type() id() <LBR> parameter_list() <RBR>
  <LCHAIN>
    decl_list()
    statement_block()
    <RETURN> <LBR> (expression())? <RBR> <SEMIC>
  <RCHAIN>
}


void type () #TYPE : {Token t;}{
  t = <INTEGER> #INT {jjtThis.value = t.image;}
  | t = <BOOLEAN> #BOOL {jjtThis.value = t.image;}
  | t = <VOID> #VOID {jjtThis.value = t.image;}

}

void parameter_list() #PARAMSLIST : {}{ //No void, want to see parameter_list Appear as a node
  (nemp_parameter_list())?
}

void nemp_parameter_list() #void : {}{ //dont want to create a node, its done in id() and type()
  id() <COLON> (type() [<COMMA> nemp_parameter_list()]) /**SHOULD I ADD #nemp_parameter_list(2) after this as its optional?**/
}

void main() #MAIN : {}{
  [
  <MAIN>
  lchain()
    decl_list()
    statement_block()
  rchain()
  ]
}

void statement_block() #void : {}{
  (statement() statement_block())?
}

void statement() #void : {}{ //Node will be created called statement
    id() 
    (
        <ASSIGN> #EQUALS expression() <SEMIC> 
      | <LBR> arg_list() <RBR> <SEMIC>
    ) 
  | lchain() #OPENSTATEMENTBLOCK statement_block() rchain() #CLOSESTATEMENTBLOCK
  | <IF> #IF condition() lchain() statement_block() rchain() [<ELSE> #ELSE lchain() statement_block() rchain()] /*****OPTION TO ELSE???*****/
  | <WHILE> #WHILE condition() lchain() statement_block() rchain()
  | <SKIPSKIP> <SEMIC>
}

/***************************************************************************************************************/
/*******************************************EXPRESSION RULE*****************************************************/
/***************************************************************************************************************/

/*********************ORIGINAL***********************/
/*
void expression() : {}{
    fragment() binary_arith_op() fragment()
  | <LBR> expression() <RBR>
  | ID() <LBR> arg_list() <RBR>
  | fragment()
}
*/

void expression() #void : {}{
    fragment() [binary_arith_op() expression()] 
}

void binary_arith_op() #BINOP : {Token t;}{
    t = <PLUS> #PLUS {jjtThis.value = t.image;} 
    | t = <MINUS> #MINUS {jjtThis.value = t.image;}
}

/*********************ORIGINAL***********************/
/*
void fragment() : {}{
    ID()
  | <MINUS> <ID>
  | <NUM>
  | <TRUE>
  | <FALSE>
  | expression()
}
*/

void fragment() #void : {}{ //Insert Token t
    id()
    (
      [<LBR> arg_list() <RBR>]
    )
  | <NUM> #NUM
  | <TRUE> #TRUE
  | <FALSE> #FALSE
  | <MINUS> #MINUS fragment()
}

/***************************************************************************************************************/
/*******************************************CONDITION RULE******************************************************/
/***************************************************************************************************************/

/*********************ORIGINAL***********************/
/*
void condition() : {}{
    <NOTOP> condition()
  | <LBR> condition() <RBR>
  | expression() comp_op() expression()
  | condition() <LBR> <OROP> | <ANDOP> <RBR> condition()
}
*/

/********************EDITED***************************/
void condition() #void : {}{
    <NOTOP> condition() 
  | <LBR> condition() <RBR> [conditionPrime()]
  | expression() comp_op() expression() [conditionPrime()]
}

void conditionPrime() #ANDOR : {}{
  (<ANDOP> | <OROP>) condition()
}

void comp_op() #COMPOP : {Token t;}{
    t = <BOOLEQLS> {jjtThis.value = t.image;}
  | t = <NOTEQLS> {jjtThis.value = t.image;}
  | t = <LESSTHAN> {jjtThis.value = t.image;}
  | t = <LESSEQL> {jjtThis.value = t.image;}
  | t = <GREATERTHAN> {jjtThis.value = t.image;}
  | t = <GREATEQL> {jjtThis.value = t.image;}
}

void arg_list() #ARGUMENTSLIST: {}{
  (nemp_arg_list())?
}

void nemp_arg_list() #void : {}{
  id() [(<COMMA> nemp_arg_list())]
}

void id() #ID : {Token t;} {
  t = <ID> {jjtThis.value = t.image;}
}

void lchain() #LCHAIN : {}{
  <LCHAIN>
}

void rchain() #RCHAIN :{}{
  <RCHAIN>
}